/// Sets rem values, with px fallback for ie8.
/// @link http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
/// @author Hugo Giraudel
/// @param {string} $property - Font-size, margin, etc
/// @param {number} $values - Measurement in px (15px 5px)
/// @example @include rem(padding, 15px 5px);
/// @output ie browsers - padding: 15px 5px; other browsers - padding: 1.5rem 0.5rem;
/// @group Measurements

@mixin rem($property, $values) {
    $px: ();
    $rem: ();

    @each $value in $values {

        $int: ();

        @if $value != auto {
            $int: parseInt($value);
        }
        @else {
            $int: $value;
        }

        @if $int == 0 or $value == auto {
            $px: append($px , $value);
            $rem: append($rem, $value);
        }
        @else {
            $unit: unit($value);
            $val: parseInt($value);

            @if $unit == 'px' {
                $px: append($px,  $value);
                $rem: append($rem, ($val / 10 + rem));
            }
            @if $unit == 'rem' {
                $px: append($px,  ($val * 10 + px));
                $rem: append($rem, $value);
            }
        }
    }

    @if $px == $rem {
        #{$property}: $px;
    } @else {
      @if $browser == 'ie8' {
            #{$property}: $px;
        }
      @if $browser == 'non-ie8' {
            #{$property}: $rem;
        }
    }
}

/// Extra small devices ONLY (phones, less than 768px)
/// @example @include media-query-max-xsmall
/// @output @media (max-width: 767px)
/// @group Media queries
@mixin media-query-max-xsmall {
    @media only screen and (max-width: calculateEm($screen-xs-max/1px)) {
        @content;
    }
}

/// Extra small devices ONLY (phones, less than 480px)
/// @example @include media-query-below-xsmall
/// @output @media (max-width: 479px)
/// @group Media queries
@mixin media-query-below-xsmall {
    @media only screen and (max-width: calculateEm(($screen-xs-min - 1)/1px)) {
        @content;
    }
}

/// Extra small devices (480px and up)
/// @example @include media-query-xsmall
/// @output @media only screen and (min-width: 30em)
/// @group Media queries
@mixin media-query-xsmall {
  @if $browser == 'non-ie8' {
    @media only screen and (min-width: calculateEm($screen-xs/1px)) {
      @content;
    }
  }
  // Force small screen styling to IE8
  @if $browser == 'ie8' {
    @content;
  }
}

/// Extra small devices to Small devices(480px to 768px)
/// @example @include media-query-xsmall-small
/// @output @media (min-width: 30em) and (max-width: 48em)
/// @group Media queries

@mixin media-query-xsmall-small {
  @if $browser == 'non-ie8' {
    @media (min-width: calculateEm($screen-xs/1px)) and (max-width: calculateEm($screen-xs-max/1px)) {
      @content;
    }

  }
  // Force small screen styling to IE8
  @if $browser == 'ie8' {
    @content;
  }
}

@mixin media-query-small-landscape {
  @if $browser == 'non-ie8' {
    @media only screen and (min-width: calculateEm($screen-sm/1px)) and (orientation: landscape) {
      @content;
    }
  }

  @if $browser == 'ie8' {
    @content;
  }
}


/// Small devices (tablets, 768px and up, also applied to IE8)
/// @example @include media-query-small
/// @output @media only screen and (min-width: 48em)
/// @group Media queries
@mixin media-query-small {
  @if $browser == 'non-ie8' {
    @media only screen and (min-width: calculateEm($screen-sm/1px)) {
      @content;
    }
  }
    // Force small screen styling to IE8
    @if $browser == 'ie8' {
        @content;
    }
}

/// Medium devices (desktops, 992px and up, also applied to IE8)
/// @example @include media-query-medium
/// @output @media only screen and (min-width: 62em)
/// @group Media queries
@mixin media-query-medium {
  @if $browser == 'non-ie8' {
    @media only screen and (min-width: calculateEm($screen-md/1px)) {
      @content;
    }
  }
    // Force medium screen styling to IE8
    @if $browser == 'ie8' {
        @content;
    }
}

@mixin media-query-max-medium {
    @media only screen and (max-width: calculateEm($screen-md-min/1px)) {
        @content;
    }
}

/// Large devices (large desktops, 1200px and up)
/// @example @include media-query-large
/// @output @media only screen and (min-width: 75em)
/// @group Media queries
@mixin media-query-large {
    @media only screen and (min-width: calculateEm($screen-lg/1px)) {
        @content;
    }
}

// Wrapper element for fixed width, centered element
@mixin wrapper($maxWidth) {
    margin: 0 auto;
        @include rem(max-width, $maxWidth);
    // Force fixed width for IE8
    @if $browser == 'ie8' {
        @include rem(width, $screen-md);
    }
}

/// Center an icon (sprite) horizontally
/// @group Sprites
@mixin center-horizontally($sprite-name) {
    left: 50%;
    margin-left: calculateRem(image-width(sprite-file($icons-x1, $sprite-name)) / 2 / 1px) * -1;
}

/// Center an icon (sprite) vertically
/// @group Sprites
@mixin center-vertically($sprite-name) {
    top: 50%;
    margin-top: calculateRem(image-height(sprite-file($icons-x1, $sprite-name)) / 2 / 1px) * -1;
}

/// Vertically align element in the middle
/// @group Utility helpers
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

/// Create disabled buttons
/// @group Buttons
@mixin create-disabled-btn($text, $bg-color) {
  color: $text;
  background: $bg-color;
  border-color: shade($bg-color, 10%);
}

/// Create buttons
/// @author kymbee
/// @group Buttons
@mixin create-btn($height, $font-size, $color-bg, $color-text, $color-bg-disabled, $color-text-disabled) {
  color: $color-text;
  @include rem(height, $height);
  @include rem(font-size, $font-size);
  background: $color-bg;
  border-color: shade($color-bg, 10%);

  .no-touch &:hover,
  &:focus {
    background: shade($color-bg, 5%);
    border-color: shade($color-bg, 15%);
  }

  &:active {
    background: shade($color-bg, 10%);
    border-color: shade($color-bg, 20%);
  }

  &.is-disabled {
    @include create-disabled-btn($color-text-disabled, $color-bg-disabled);
  }
}

/// Streamline animations
/// @group Animations
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

/// Autoprefix animations
/// @group Animations
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

//*refactor* Remove mixin, use create-icon
@mixin font-icons($icon-name) {
  display: inline-block;
  @extend %mns-icons;
  @extend .#{$icon-name} !optional;
}

/// Creates pseudo class containing font icon
/// @param {string} $name - Name of class, ie 'gift' will become '.icon--gift'
/// @param {string} $icon - Name of icon you would like to extend, ie '.icon-gift'
/// @example @include rem('gift', 'icon-gift');
/// @output
/// .icon--gift {
///    &:before {
///      @extend %icon-gift;
///    }
///  }
/// @group Icons

@mixin create-icon($name, $icon) {
  .icon--#{$name} {
    &:before {
      @extend %#{$icon};
    }
  }
}

/// Create arrows mixin, based on the CSS version (link provided).
/// @author kymbee
/// @param {string} $size - ie, 5px
/// @param {string} $direction - ie, up | down | left | right
/// @param {string} $position - ie, top | bottom | left | right
/// @param {string} $color - ie, $color__brand--green
/// @example @include create-arrow(5px, up, right, $color__brand--green);
/// @link www.cssarrowplease.com
@mixin create-arrow($size, $direction, $position, $color) {

  $opposite: '';
  $vertical: 'top';
  $horizontal: 'left';
  $verticalVal: '';
  $horizontalVal: '';
  $margin: '';

  @if $direction == 'up' {
    $direction: 'bottom'
  } @else if $direction == 'down' {
    $direction: 'top'
  } @else if $direction == 'left' {
    $direction: 'right'
  } @else if $direction == 'right' {
    $direction: 'left'
  }

  @if $position == 'top' {
    $vertical: 'bottom';
    $opposite: 'bottom';
    $verticalVal: 100%;
    $horizontalVal: 50%;
    $margin: 'left';
  } @else if $position == 'bottom' {
    $opposite: 'top';
    $verticalVal: 100%;
    $horizontalVal: 50%;
    $margin: 'left';
  } @else if $position == 'left' {
    $horizontal:'right';
    $opposite: 'right';
    $verticalVal: 50%;
    $horizontalVal: 100%;
    $margin: 'top';
  } @else if $position == 'right' {
    $opposite: 'left';
    $verticalVal: 50%;
    $horizontalVal: 100%;
    $margin: 'top';
  }
  position: relative;
  &:after {
    #{$vertical}: $verticalVal;
    #{$horizontal}: $horizontalVal;
    border: solid transparent;
    content: ' ';
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-#{$direction}-color: $color;
    border-width: $size;
    margin-#{$margin}: -#{$size};
  }
}
